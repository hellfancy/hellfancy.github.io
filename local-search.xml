<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GPT QQ机器人搭建指南（插件安装版）</title>
    <link href="/2023/10/12/Bot-build-guide/"/>
    <url>/2023/10/12/Bot-build-guide/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>本期更新一期nonebot机器人搭建指南，本期更新使用nonebot机器人搭建一个带有gpt3.5的qq机器人可以用于个人或群聊使用，主要使用别人开发的插件。本地Windows或者Linux服务器均可</p></blockquote><h2 id="nonebot概览"><a href="#nonebot概览" class="headerlink" title="nonebot概览"></a>nonebot概览</h2><p>nonebot官网 <code>https://nonebot.dev/</code> ，默认来说我们使用最新的v2版本<br>感兴趣可以看看官网的介绍，nonebot 简单来说是一个跨平台的 Python 异步聊天机器人开发框架。<br>能看得懂官方文档的小伙伴直接按官方文档操作就行了hh。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>请确保你的 Python 版本 &gt;&#x3D; 3.8，建议使用 3.10（可以兼容更多的新插件）<br>我们强烈建议使用虚拟环境进行开发，如果没有使用虚拟环境，请确保已经卸载可能存在的 NoneBot v1！！！</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先我们先安装nonebot，我们打开power shell，然后执行下面内容安装 nonebot</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> nonebot<br></code></pre></td></tr></table></figure><p>然后我们执行以下内容，安装脚手架</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">pip install nb-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>然后我们使用脚手架来创建一个项目：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nb create</span><br></code></pre></td></tr></table></figure><p>请注意，<strong>多选项使用上下左右键选择，空格选中或取消，回车确认。或者使用鼠标左键选中或取消</strong></p><p>这一指令将会执行创建项目的流程，你将会看到一些询问：</p><p>1.项目模板<br>这里我们选择 bootstrap 模板，它是一个简单的项目模板，能够安装商店插件。如果你需要自行编写插件，这里请选择 simple 模板。</p><p><img src="/Bot-build-guide/project_choose.png" alt="项目模板选择"></p><p>2.项目名称<br>项目名称: abot<br>这里我们以 abot 为例，作为项目名称。你可以根据自己的需要来命名。</p><p>3.驱动器<br>驱动器使用FastAPI驱动器<br>要使用哪些驱动器?  仅使用 FastAPI (FastAPI 驱动器)</p><p><img src="/Bot-build-guide/drive_choose.png" alt="安装驱动"></p><p>4.适配器<br>要使用哪些适配器 ？仅使用 OneBot V11 (OneBot V11 协议)</p><p><img src="/Bot-build-guide/adapter_choose.png" alt="安装适配器"></p><p>是否立即安装依赖？是，输入Y<br>是否创建虚拟环境？是，输入Y</p><p><img src="/Bot-build-guide/create_venv.png" alt="安装虚拟环境"></p><p>这里我们选择了创建虚拟环境，<code>nb-cli</code> 在之后的操作中将会自动使用这个虚拟环境。如果你不需要自动创建虚拟环境或者已经创建了其他虚拟环境，<code>nb-cli</code> 将会安装依赖至当前激活的 Python 虚拟环境。</p><p>5.选择内置插件<br>要使用哪些内置插件？ 使用 echo 插件<br>这里我们选择 echo 插件作为示例。这是一个简单的复读回显插件，可以用于测试你的机器人是否正常运行。</p><p><img src="/Bot-build-guide/inner_plugins.png" alt="使用插件"></p><p>6.运行项目<br>在项目创建完成后，你可以根据控制台提示，在项目目录中使用以下命令来运行项目：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">cd abot<br>nb <span class="hljs-built_in">run</span> <span class="hljs-comment">--reload</span><br></code></pre></td></tr></table></figure><p>看到下面情况代表成功</p><p><img src="/Bot-build-guide/run_project.png" alt="运行项目"><br>你现在应该已经运行起来了你的第一个 NoneBot 项目了！请注意，生成的项目中使用了 FastAPI 驱动器和 OneBot V1 适配器，你之后可以自行修改配置或安装其他适配器。<br>我们先 <code>Ctrl</code>+<code>C</code> 退出</p><h2 id="gocq插件安装"><a href="#gocq插件安装" class="headerlink" title="gocq插件安装"></a>gocq插件安装</h2><p>首先在nonebot2的官网中的导航栏找到商店<br><img src="/Bot-build-guide/into_store.png" alt="安装gocq"></p><h3 id="安装gocq插件"><a href="#安装gocq插件" class="headerlink" title="安装gocq插件"></a>安装gocq插件</h3><p>插件中我们展示只安装gocq，用于登录测试<br><img src="/Bot-build-guide/into_plugin.png" alt="安装gocq"><br>安装 gocq 启动器插件<br>在 power shell 中粘贴安装命令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">nb <span class="hljs-keyword">plugin</span> install nonebot-<span class="hljs-keyword">plugin</span>-gocqhttp<br></code></pre></td></tr></table></figure><p><img src="/Bot-build-guide/install_gocq.png" alt="安装gocq"></p><p>等待安装完成即可</p><h3 id="配置相关文件"><a href="#配置相关文件" class="headerlink" title="配置相关文件"></a>配置相关文件</h3><p>安装完相关配置后，需要修改目录下 <code>abot/</code>下配置文件<br>在<code>.env.prod</code>文件中，使用如下的配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DRIVER</span>=~fastapi <span class="hljs-comment"># 使用fastapi驱动器</span><br><span class="hljs-attr">HOST</span>=<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span> <span class="hljs-comment"># 配置 NoneBot2 监听的 IP/主机名</span><br><span class="hljs-attr">PORT</span>=<span class="hljs-number">11111</span> <span class="hljs-comment"># 配置 NoneBot2 监听的端口</span><br></code></pre></td></tr></table></figure><h3 id="测试gocq插件安装以及配置qq"><a href="#测试gocq插件安装以及配置qq" class="headerlink" title="测试gocq插件安装以及配置qq"></a>测试gocq插件安装以及配置qq</h3><p>我们使用<code>nb run</code>命令启动机器人</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">nb <span class="hljs-built_in">run</span><br></code></pre></td></tr></table></figure><p>出现下面界面算成功<br><img src="/Bot-build-guide/successd_test.png" alt="出现该图配置算成功"><br>在浏览器中输入<br><code>http://127.0.0.1:11111/go-cqhttp/#/</code>可以看到我们成功地配置了gocq<br><img src="/Bot-build-guide/setting_gocq.png" alt="gocq配置成功"><br>然后我们添加机器人账号，不要输入密码，不要输入密码，不要输入密码，后面使用二维码登录！！！<br><img src="/Bot-build-guide/add_user.png" alt="添加账号并启动"><br>点击启动<br><img src="/Bot-build-guide/login.png" alt="二维码登录"><br>然后扫描二维码登录qq，成功登录代表成功，否则查看网页中得到进程日志，可能需要使用手机热点登录。</p><h2 id="GPT插件安装及运行"><a href="#GPT插件安装及运行" class="headerlink" title="GPT插件安装及运行"></a>GPT插件安装及运行</h2><p>上面就完成了机器人整体的搭建过程。下面我们进行核心插件安装，实现真正的GPTqq机器人的功能。由于本人不是插件开发者，也不是社区贡献者，感兴趣的朋友希望帮帮插件开发者的GitHub点点star哈哈哈。下面开始。<br>在Nonebot官网中打开商店，搜索GPT3，第一个插件就是我们需要的插件<br><img src="/Bot-build-guide/add_plugin.png" alt="安装插件"><br>我们点击命令，用 powershell 在 <code>/abot</code> 目录下安装。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">nb <span class="hljs-keyword">plugin</span> install nonebot-<span class="hljs-keyword">plugin</span>-gpt3<br></code></pre></td></tr></table></figure><p>等待安装完成即可</p><h3 id="配置文件相关"><a href="#配置文件相关" class="headerlink" title="配置文件相关"></a>配置文件相关</h3><p>安装成功后我们需要完成一些文件配置，打开 <code>.env</code>文件<br>作者GitHub中需要如下的配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">gpt3_command_prefix</span> = <span class="hljs-string">&quot;.&quot;</span>                          <span class="hljs-comment"># 基本会话中的指令前缀</span><br><span class="hljs-attr">openai_api_key</span> = <span class="hljs-string">&quot;xxx&quot;</span>                             <span class="hljs-comment"># API密钥</span><br><br><span class="hljs-comment"># 默认人格</span><br><span class="hljs-attr">gpt3_default_preset</span> = <span class="hljs-string">&quot;以下是与一个叫鸡哥的篮球高手的对话。你叫鸡哥，是一个唱跳rap篮球的高手，并且每句话后会带上厉不厉害你鸡哥!&quot;</span><br><span class="hljs-attr">gpt3_proxy</span> = <span class="hljs-string">&quot;http://127.0.0.1:7890&quot;</span>               <span class="hljs-comment"># 代理地址</span><br><span class="hljs-attr">gpt3_need_at</span> = <span class="hljs-literal">False</span>                               <span class="hljs-comment"># 是否需要@才触发命令</span><br><span class="hljs-attr">gpt3_image_render</span> = <span class="hljs-literal">False</span>                          <span class="hljs-comment"># 是否渲染为图片</span><br><span class="hljs-attr">gpt3_image_limit</span> = <span class="hljs-number">150</span>                             <span class="hljs-comment"># 长度超过多少才会渲染成图片</span><br><span class="hljs-attr">gpt3_max_tokens</span> = <span class="hljs-number">1000</span>                             <span class="hljs-comment"># 回答内容最大长度</span><br><span class="hljs-attr">gpt3_chat_count_per_day</span> = <span class="hljs-number">150</span>                      <span class="hljs-comment"># 普通用户每天聊天次数上限</span><br><span class="hljs-attr">gpt3_model</span> = <span class="hljs-string">&#x27;gpt-3.5-turbo&#x27;</span>                       <span class="hljs-comment"># 语言模型</span><br></code></pre></td></tr></table></figure><p>根据自身要求，追加填写在 <code>.env.prod</code>文件里<br>最后我们使用<code>nb run</code>运行，根据配置文件的设置可以在qq中进行对话。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/Bot-build-guide/res_show.jpeg" alt="效果展示"></p><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>本期内容到此结束，本人只是插件的使用者，并非作者，今后仍需要不断学习，开发属于自己的插件，今后若有时间，会更新插件开发教程。当然，商店中也有许多其他插件，比如表情包制作，点歌，今日人品等等。感兴趣自行安装，遇到问题也可以问我。感谢观看，最后感谢gocq作者和插件gpt3的作者！</p>]]></content>
    
    
    
    <tags>
      
      <tag>bot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell常用语法（超长文整理）</title>
    <link href="/2023/09/12/Shell-grammer/"/>
    <url>/2023/09/12/Shell-grammer/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell常用语法（超长文整理）"><a href="#Shell常用语法（超长文整理）" class="headerlink" title="Shell常用语法（超长文整理）"></a>Shell常用语法（超长文整理）</h1><blockquote><p>本文记录个人学习的shell语法，方便自己复习和补充。<br>学习时，建议把所有的命令自己在终端上多敲几遍，根据自己的奇思妙想，编写shell代码并测试，代码是可以熟能生巧的</p></blockquote><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>Linux中常见的shell脚本有很多种，常见的有：<br>-Bourne Shell(<code>/usr/bin/sh</code>或<code>/bin/sh</code>)<br>-Bourne Again Shell(<code>/bin/bash</code>)<br>-C Shell(<code>/usr/bin/csh</code>)<br>-K Shell(<code>/usr/bin/ksh</code>)<br>-zsh</p><ul><li>…</li></ul><p>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写 <code>#! /bin/bash</code>，指明bash为脚本解释器。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释 #"></a>单行注释 <code>#</code></h3><p>在行首加上<code>#</code>符号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这是一个单行注释</span><br>echo &quot;hello world!&quot;<br></code></pre></td></tr></table></figure><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释 :&lt;&lt;EOF EOF"></a>多行注释 <code>:&lt;&lt;EOF EOF</code></h3><p>以<code>:&lt;&lt;EOF</code>为一行的开头，以<code>EOF</code>为一行的结尾，中间为注释内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">:&lt;&lt;EOF<br>这是一个多行注释<br>这是一个多行注释<br>这是一个多行注释<br>EOF<br></code></pre></td></tr></table></figure><p>可以把<code>EOF</code>换成任意字符串，也可以删掉<code>:</code>不写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">:&lt;&lt;ccc<br>这是一个多行注释<br>这是一个多行注释<br>这是一个多行注释<br>ccc<br><br>echo &quot;hello world!&quot;<br><br>&lt;&lt;!<br>这是一个多行注释<br>这是一个多行注释<br>这是一个多行注释<br>!<br></code></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=&quot;ccc&quot;<br>name=&#x27;ccc&#x27;<br>name=ccc<br><span class="hljs-meta prompt_"># </span><span class="language-bash">等号两边不能有空格</span><br></code></pre></td></tr></table></figure><p> 如果一个变量不存在的话，他的值是空字符串</p><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>通过 <code>$</code> 或者 <code>$&#123;&#125;</code> 使用，<code>$&#123;&#125;</code>中的括号指定了变量的范围</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=&quot;abc&quot;<br>echo $name<br>echo $&#123;name&#125;<br>echo $&#123;name&#125;666<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">abc<br>abc<br>abc666<br></code></pre></td></tr></table></figure><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>通过<code>readonly</code>或者<code>declare -r</code>声明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cc=&quot;abc&quot;<br>declare -r cc<br>echo $cc<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cc=&quot;abc&quot;<br>readonly cc<br>echo $cc<br></code></pre></td></tr></table></figure><p>两个结果都会显示报错<br><code>line 3: cc: readonly variable</code></p><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>通过<code>unset</code>来删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cc=abc<br>echo $cc<br>unset cc<br>echo $cc<br></code></pre></td></tr></table></figure><p><code>unset</code>之后<code>echo</code>该变量会输出一个空行。被声明为只读的变量无法被unset删除</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul><li>自定义变量（局部变量）<br>  子进程不能访问的变量</li><li>环境变量（全局变量）<br>  子进程可以访问的变量</li></ul><p>自定义变量改成环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=abc # 定义变量<br>export name  # 第一种方法<br>declare -x name  # 第二种方法<br></code></pre></td></tr></table></figure><p>环境变量改为自定义变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export name=abc  # 定义环境变量<br>declare +x name  # 改为自定义变量<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串可以用单引号，也可以用双引号，也可以不用引号。<br>单引号与双引号的区别：</p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=cyf<br>echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello,$name \&quot;hh\&quot;<br>echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello,cyf&quot;hh&quot;<br></code></pre></td></tr></table></figure>字符串去长度使用<code>$&#123;#xxx&#125;</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=cyf666<br>echo $&#123;#name&#125;<br></code></pre></td></tr></table></figure></li><li>输出结果为<code>6</code></li></ul><p>字符串截断使用<code>$&#123;xxx:startIndex:endIndex&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=cyf666<br>echo $&#123;name:0:4&#125;<br></code></pre></td></tr></table></figure><ul><li>输出结果为<code>cyf6</code></li></ul><h2 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h2><h3 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h3><p>在执行shell脚本时，可以向脚本传递参数。<code>$1</code>是第一个参数，<code>$2</code>是第二个参数，以此类推。特殊的，<code>$0</code>是文件名（包含路径）。例如：</p><p>创建文件<code>test.sh</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bash/bin</span><br><br>echo &quot;文件名：&quot;$0<br>echo &quot;第一个参数：&quot;$1<br>echo &quot;第二个参数：&quot;$2<br>echo &quot;第三个参数：&quot;$3<br>echo &quot;第四个参数：&quot;$4<br></code></pre></td></tr></table></figure><p>使用以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x test.sh<br>./test.sh 1 2 3 4<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">文件名：./test.sh<br>第一个参数：1<br>第二个参数：2<br>第三个参数：3<br>第四个参数：4<br></code></pre></td></tr></table></figure><h3 id="其他相关变量"><a href="#其他相关变量" class="headerlink" title="其他相关变量"></a>其他相关变量</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>$#</code></td><td>代表文件传入的参数个数，如上例中值为4</td></tr><tr><td><code>$*</code></td><td>由所有参数构成的用空格隔开的字符串，如上例中值为<code>&quot;$1 $2 $3 $4&quot;</code></td></tr><tr><td><code>$@</code></td><td>每个参数分别用双引号括起来的字符串，如上例中值为<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; &quot;$4&quot;</code></td></tr><tr><td><code>$$</code></td><td>脚本当前运行的进程ID</td></tr><tr><td><code>$?</code></td><td>上一条命令的退出状态（注意不是stdout，而是exit code）。0表示正常退出，其他值表示错误</td></tr><tr><td><code>$(command)</code></td><td>返回<code>command</code>这条命令的stdout（可嵌套）</td></tr><tr><td>`command `</td><td>返回<code>command</code>这条命令的stdout（不可嵌套）</td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。<strong>数组下标从0开始</strong>。</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><ul><li>用小括号表示，元素之间用空格隔开</li><li>或者直接定义索引位置的元素值<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1</span><br>array=(1 a b ccc)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2</span><br>array[0]=1<br>array[1]=a<br>array[2]=&quot;b&quot;<br>array[3]=&#x27;ccc&#x27;<br></code></pre></td></tr></table></figure></li></ul><h3 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a>读取数组中某个元素的值</h3><p>格式：<code>$&#123;array[index]&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">array=(1 a b ccc)<br>echo $&#123;array[0]&#125;<br>echo $&#123;array[1]&#125;<br>echo $&#123;array[2]&#125;<br>echo $&#123;array[3]&#125;<br></code></pre></td></tr></table></figure><h3 id="读取整个数组"><a href="#读取整个数组" class="headerlink" title="读取整个数组"></a>读取整个数组</h3><p>两种方法<code>$&#123;array[@]&#125;</code>或者<code>$&#123;array[*]&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">array=(1 a b ccc)<br>echo $&#123;array[@]&#125;<br>echo $&#123;array[*]&#125;<br></code></pre></td></tr></table></figure><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><p>两种方法<code>$&#123;#array[@]&#125;</code>或者<code>$&#123;#array[*]&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">array=(1 a b ccc)<br>echo $&#123;#array[@]&#125;<br>echo $&#123;#array[*]&#125;<br></code></pre></td></tr></table></figure><h2 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h2><p>expr命令用于求表达式的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">expr</span> 表达式<br></code></pre></td></tr></table></figure><p>表达式说明：</p><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会<code>stdout</code>中输出结果。如果为逻辑关系表达式，则结果为真时，<code>stdout</code>输出1，否则输出0。</li><li>expr的<code>exit code</code>：如果为逻辑关系表达式，则结果为真时，<code>exit code</code>为0，否则为1。</li></ul><h3 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h3><ul><li><code>length STRING</code><br>返回<code>STRING</code>的长度</li><li><code>index STRING CHARSET</code><br><code>CHARSET</code>中任意单个字符在<code>STRING</code>中最前面的字符位置，<strong>下标从1开始</strong>。如果在<code>STRING</code>中完全不存在<code>CHARSET</code>中的字符，则返回0。</li><li><code>substr STRING POSITION LENGTH</code><br>返回<code>STRING</code>字符串中从<code>POSITION</code>开始，长度最大为<code>LENGTH</code>的子串。如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">str=&quot;Hello World!&quot;<br>echo `expr &quot;$str&quot;`<br>echo `expr &quot;$str&quot; aWd`<br>echo `expr &quot;$str&quot; 2 3`<br><br>echo `expr &#x27;$str&#x27;`<br>echo `expr &#x27;$str&#x27; aWd`<br>echo `expr &#x27;$str&#x27; 2 3`<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">12<br>7<br>ell<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>4<br>0<br>str<br></code></pre></td></tr></table></figure><p>思考结果为啥不同</p><h3 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h3><p><code>expr</code>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li><p><code>+ -</code><br>加减运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>* / %</code><br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p><code>()</code> 可以改变优先级，但需要用反斜杠转义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=3<br>b=4<br><br>echo `expr $a + $b`  # 输出7<br>echo `expr $a - $b`  # 输出-1<br>echo `expr $a \* $b`  # 输出12，*需要转义<br>echo `expr $a / $b`  # 输出0，整除<br>echo `expr $a % $b` # 输出3<br>echo `expr \( $a + 1 \) \* \( $b + 1 \)`  # 输出20，值为(a + 1) * (b + 1)<br></code></pre></td></tr></table></figure></li></ul><h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><ul><li><p><code>|</code><br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。</p></li><li><p><code>&amp;</code><br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p></li><li><p><code>&lt; &lt;= = == != &gt;= &gt;</code><br>比较两端的参数，如果为<code>true</code>，则返回1，否则返回0。<code>==</code>是<code>=</code>的同义词。<code>expr</code>首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p></li><li><p><code>()</code> 可以改变优先级，但需要用反斜杠转义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=3<br>b=4<br>c=0<br>d=5<br><br>echo `expr $a \&amp; $b`<br>echo `expr $a \| $b`<br>echo `expr $c \&amp; $d`<br>echo `expr $c \| $d`<br><br>echo `expr $a \&lt; $b`<br>echo `expr $a &#x27;&lt;&#x27; $b`<br>echo `expr $c &#x27;&lt;=&#x27; $d`<br>echo `expr $c \&lt;\= $d`<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">3<br>3<br>0<br>5<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">####</span></span><br>1<br>1<br>1<br>1<br></code></pre></td></tr></table></figure></li></ul><h2 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h2><p>用于从标准输入中读取单行数据。当读到文件结束符时，<code>exit code</code>为1，否则为0。<br>参数说明</p><ul><li><code>-p</code>: 后面可以接提示信息</li><li><code>-t</code>：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">read</span> name  <span class="hljs-comment"># 读入name的值</span><br>ccyyff  <span class="hljs-comment"># 标准输入，输入ccyyff</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span>  <span class="hljs-comment"># 输出name的值</span><br>ccyyff <span class="hljs-comment"># 标准输出，打印ccyyff</span><br><span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;Please input your name: &quot;</span> -t 5 name  <span class="hljs-comment"># 读入name的值，等待时间5秒</span><br>Please input your name: ccyyff  <span class="hljs-comment"># 标准输出&quot;Please input your name:&quot; ，然后我们标准输入name的值ccyyff</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$name</span>  <span class="hljs-comment"># 输出name的值</span><br>ccyyff  <span class="hljs-comment"># 标准输出</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>用于输出字符串</p><h3 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;Hello Terminal&quot;<br>echo Hello Terminal  # 引号可以省略<br></code></pre></td></tr></table></figure><h3 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;\&quot;Hello Terminal\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义<br>echo \&quot;HelloTerminal\&quot;  # 也可以省略双引号<br></code></pre></td></tr></table></figure><h3 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">name=cyf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;My name is <span class="hljs-variable">$name</span>&quot;</span>  <span class="hljs-comment"># 输出 My name is cyf</span><br></code></pre></td></tr></table></figure><h3 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;Hi\n&quot;  # -e 开启转义<br>echo &quot;ccyyff&quot;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Hi<br><br>ccyyff<br></code></pre></td></tr></table></figure><h3 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行<br>echo &quot;ccyyff&quot;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><br><span class="hljs-attribute">Hi ccyyff</span><br></code></pre></td></tr></table></figure><h3 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中<br></code></pre></td></tr></table></figure><h3 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=ccyyff<br>echo &#x27;$name\&quot;&#x27;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">name\&quot;</span><br></code></pre></td></tr></table></figure><h3 id="显示命令的执行结果"><a href="#显示命令的执行结果" class="headerlink" title="显示命令的执行结果"></a>显示命令的执行结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span>`<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Wed Sep 1 11:45:33 CST 2021<br></code></pre></td></tr></table></figure><h2 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h2><p>与<code>C/C++</code>中<code>printf</code>类似</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">printf &quot;%10d.\n&quot; 123  # 占10位，右对齐<br>printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数，左对齐<br>printf &quot;My name is %s\n&quot; &quot;cyf&quot;  # 格式化输出字符串<br>printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">       123.<br>123.12    .<br>My name is cyf<br>2 * 3 = 6<br></code></pre></td></tr></table></figure><h2 id="test命令与判断符号"><a href="#test命令与判断符号" class="headerlink" title="test命令与判断符号"></a>test命令与判断符号</h2><h3 id="逻辑运算符-和"><a href="#逻辑运算符-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a>逻辑运算符&amp;&amp;和||</h3><ul><li><code>&amp;&amp;</code> 表示与，<code>||</code> 表示或</li><li>二者具有短路原则：<br><code>expr1 &amp;&amp; expr2</code>：当expr1为假时，直接忽略expr2<br><code>expr1 || expr2</code>：当expr1为真时，直接忽略expr2</li><li>表达式的<code>exit code</code>为0，表示真；为非零，表示假。（与<code>C/C++</code>中的定义相反）</li></ul><h3 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h3><p>在命令行中输入<code>man test</code>，可以查看test命令的用法。<br>test命令用于判断文件类型，以及对变量做比较。<br>test命令用<code>exit code</code>返回结果，而不是使用<code>stdout</code>。0表示真，非0表示假。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">test 2 -lt 3  # 为真，返回值为0<br>echo $?  # 输出上个命令的返回值，输出0<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###</span></span><br>ls<br>test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot; # 如果test.sh存在输出exist，否则输出Not exist<br>exist  # test.sh 文件存在<br>test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;<br>Not exist  # testh2.sh 文件不存在<br></code></pre></td></tr></table></figure><h3 id="文件类型测试"><a href="#文件类型测试" class="headerlink" title="文件类型测试"></a>文件类型测试</h3><p>格式 <code>test -e filename</code></p><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>-e</code></td><td>测试是否存在</td></tr><tr><td><code>-f</code></td><td>测试是否为文件</td></tr><tr><td><code>-d</code></td><td>测试是否为目录</td></tr></tbody></table><h3 id="文件权限测试"><a href="#文件权限测试" class="headerlink" title="文件权限测试"></a>文件权限测试</h3><p>格式<code>test -r filename</code></p><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>-r</code></td><td>测试是否可读</td></tr><tr><td><code>-w</code></td><td>测试是否可写</td></tr><tr><td><code>-x</code></td><td>测试是否可执行</td></tr><tr><td><code>-s</code></td><td>测试是否为空文件</td></tr></tbody></table><h3 id="整数比较"><a href="#整数比较" class="headerlink" title="整数比较"></a>整数比较</h3><p>格式<code>test $a -eq $b</code>  # a是否等于b</p><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>eq</code></td><td>等于</td></tr><tr><td><code>ne</code></td><td>不等于</td></tr><tr><td><code>gt</code></td><td>大于</td></tr><tr><td><code>lt</code></td><td>小于</td></tr><tr><td><code>ge</code></td><td>大于等于</td></tr><tr><td><code>le</code></td><td>小于等于</td></tr></tbody></table><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>test -z STRING</code></td><td>判断<code>STRING</code>是否为空，如果为空，则返回<code>true</code></td></tr><tr><td><code>test -n STRING</code></td><td>判断<code>STRING</code>是否非空，如果非空，则返回<code>true</code>（-n可以省略）</td></tr><tr><td><code>test str1 == str2</code></td><td>判断str1是否等于str2</td></tr><tr><td><code>test str1 != str2</code></td><td>判断str1是否不等于str2</td></tr></tbody></table><h3 id="多重判定条件"><a href="#多重判定条件" class="headerlink" title="多重判定条件"></a>多重判定条件</h3><p>格式 <code>test -r filename -a -x filename</code></p><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td><code>-a</code></td><td>两条件是否同时成立</td></tr><tr><td><code>-o</code></td><td>两条件是否至少一个成立</td></tr><tr><td><code>!</code></td><td>取反。如 test ! -x file，当file不可执行时，返回true</td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title="[]"></a>[]</h3><p><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于<code>if</code>语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[ 2 -lt 3 ]  # 为真，返回值为0<br>echo $?  # 输出上个命令的返回值，输出0<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###</span></span><br>ls<br>[ -e test.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;<br>[ -e test2.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><code>[]</code>内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来<br>例如：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">name=&quot;ccyyff&quot;<br>[ $name == &quot;ccyyff&quot; ]  # 错误，等价于 [ ccyyff == &quot;ccyyff&quot; ]，参数太多<br>[ &quot;$name&quot; == &quot;ccyyff&quot; ]  # 正确<br></code></pre></td></tr></table></figure></li></ul><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>形式 <code>if  ... then ...</code> <code>elif ... then...</code> <code>else ...</code><br>来几个例子熟悉一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### single if</span></span><br>a=3<br>b=4<br><br>if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]<br>then<br>    echo &quot;$&#123;a&#125; &lt; $&#123;b&#125;&quot;<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### if else</span></span><br>a=3<br>b=4<br><br>if ! [ &quot;$a&quot; -lt &quot;$b&quot; ]<br>then<br>    echo $&#123;a&#125; &lt;= $&#123;b&#125;<br>else<br>    echo $&#123;a&#125; &lt; $&#123;b&#125;<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">### if elif else</span></span><br>a=3<br>b=4<br><br>if [ &quot;$a&quot; -eq &quot;$b&quot; ]<br>then<br>    echo $&#123;a&#125; = $&#123;b&#125;<br>elif [ &quot;$a&quot; -lt &quot;$b&quot; ]<br>then<br>    echo $&#123;a&#125; &lt; $&#123;b&#125;<br>else <br>echo $&#123;a&#125; &gt; $&#123;b&#125;<br>fi<br></code></pre></td></tr></table></figure><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><p>相当于 <code>C\C++\Java</code> 中的<code>switch</code>语句<br>举个例子熟悉一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=4<br>case $a in<br>    1)<br>        echo $&#123;a&#125; = 1<br>        ;;  <br>    2)<br>        echo $&#123;a&#125; = 2<br>        ;;  <br>    3)                                                <br>        echo $&#123;a&#125; = 3<br>        ;;  <br>    *)<br>        echo $&#123;a&#125; = 其他<br>        ;;  <br>esac<br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for-in-do-done"><a href="#for-in-do-done" class="headerlink" title="for ... in ... do ... done"></a><code>for ... in ... do ... done</code></h3><p>格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">for var in val1 val2 val3<br>do<br>    xxx<br>    xx<br>    ...<br>done<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 输出 a 2 cc，每个元素占一行</span></span><br>for i in a 2 cc<br>do<br>    echo $i<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 可以使用表达式</span></span><br>for file in `ls`<br>do<br>    echo $file<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 输出1~10</span></span> <br>for i in $(seq 1 10)<br>do<br>    echo $i<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 输出1~10 a~z</span></span><br>for i in &#123;a..z&#125;<br>do<br>    echo $i<br>done<br></code></pre></td></tr></table></figure><h3 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a><code>for ((…;…;…)) do…done</code></h3><p>格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">for ((expression; condition; expression))<br>do<br>    xxx<br>    xxx<br>done<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for ((i=1;i&lt;10;i++))<br>do<br>echo $i<br>done<br></code></pre></td></tr></table></figure><h3 id="while…do…done"><a href="#while…do…done" class="headerlink" title="while…do…done"></a>while…do…done</h3><p>格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition<br>do<br>    xxx<br>    xxx<br>    ...<br>done<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 给变量name重复赋值，每次输出赋入的值，可以是使用Ctrl + d推出</span></span><br>while read name<br>do<br>    echo $name<br>done<br></code></pre></td></tr></table></figure><h3 id="until…do…done"><a href="#until…do…done" class="headerlink" title="until…do…done"></a>until…do…done</h3><p>当条件<code>condition</code>为真时结束。<br>格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">until condition<br>do<br>    xxx<br>    xxx<br>done<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 当用户输入yes或者YES时结束，否则一直等待读入。</span></span><br>until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]<br>do<br>    read -p &quot;plz input yes/YES to stop this program: &quot; word<br>done<br></code></pre></td></tr></table></figure><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>跳出当前一层循环，但不能跳出<code>case</code>，<code>case</code>属于条件语句<br>例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 该示例每读入非EOF的字符串，会输出一遍1-7。</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">## 该程序可以输入Ctrl+d文件结束符来结束，也可以直接用Ctrl+c杀掉该进程。</span></span><br>while read name<br>do<br>    for ((i=1;i&lt;=10;i++))<br>    do<br>        case $i in<br>            8)<br>                break<br>                ;;<br>            *)<br>                echo $i<br>                ;;<br>        esac<br>    done<br>done<br></code></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>跳出当前循环<br>例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">for ((i=1;i&lt;=10;i++))<br>do<br>    if [ `expr $i % 2` -eq 0 ]<br>    then<br>        continue<br>    fi<br>    echo $i<br>done<br></code></pre></td></tr></table></figure><h3 id="处理死循环"><a href="#处理死循环" class="headerlink" title="处理死循环"></a>处理死循环</h3><p>死循环的处理方式<br>如果可以打开该程序，则输入<code>Ctrl + c</code>即可。</p><p>否则可以直接关闭进程：</p><ul><li>使用<code>top</code>命令找到进程的<code>PID</code></li><li>输入<code>kill -9 PID</code>即可关掉此进程</li></ul><h2 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h2><p><code>exit</code>命令用来退出当前<code>shell</code>进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。</p><p><code>exit</code>命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 <code>0</code>。</p><p><code>exit</code>退出状态只能是一个介于 <code>0~255</code> 之间的整数，其中只有 <code>0</code> 表示成功，其它值都表示失败。<br>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shelll">#! /bin/bash<br><br>if [ $# -ne 1 ]  # 如果传入参数个数等于1，则正常退出；否则非正常退出。<br>then<br>    echo &quot;args invalid&quot;<br>    exit 1<br>else<br>    echo &quot;args valid&quot;<br>    exit 0<br>fi<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">./test.sh 110<br>echo $?<br><br>./test 1 2 3<br>echo $?<br></code></pre></td></tr></table></figure><h2 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h2><p>每个进程默认打开3个文件描述符：</p><p><code>stdin</code>标准输入，从命令行读取数据，文件描述符为<code>0</code><br><code>stdout</code>标准输出，向命令行输出数据，文件描述符为<code>1</code><br><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为<code>2</code><br>可以用文件重定向将这三个文件重定向到其他文件中。</p><h3 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>command &gt; file</code></td><td>将<code>stdout</code>重定向到file中</td></tr><tr><td><code>command &lt; file</code></td><td>将<code>stdin</code>重定向到file中</td></tr><tr><td><code>command &gt;&gt; file</code></td><td>将<code>stdout</code>以追加方式重定向到file中</td></tr><tr><td><code>command n&gt; file</code></td><td>将文件描述符<code>n</code>重定向到file中</td></tr><tr><td><code>command n&gt;&gt; file</code></td><td>将文件描述符<code>n</code>以追加方式重定向到file中</td></tr></tbody></table><h3 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo -e &quot;Hello \c&quot; &gt; output.txt  # 将stdout重定向到output.txt中<br>echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中<br><br>read str &lt; output.txt  # 从output.txt中读取字符串<br><br>echo $str  # 输出结果：Hello World<br></code></pre></td></tr></table></figure><h2 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向stdin和stdout</h2><p>创建bash脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br><br>read a<br>read b<br><br>echo $(expr &quot;$a&quot; + &quot;$b&quot;)<br></code></pre></td></tr></table></figure><p>创建<code>input.txt</code>，里面的内容为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>4<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x test.sh  # 添加可执行权限<br>./test.sh &lt; input.txt &gt; output.txt  # 从input.txt中读取内容，将输出写入output.txt中<br>cat output.txt  # 查看output.txt中的内容<br></code></pre></td></tr></table></figure><p>结果为<code>7</code></p><h2 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h2><p>类似于<code>C/C++</code>中的<code>include</code>操作，<code>Java</code>中的<code>import</code>操作，<code>bash</code>也可以引入其他文件中的代码。</p><p>语法格式</p><p><code>. filename </code> # 注意点和文件名之间有一个空格<br>或<br><code>source filename</code><br>示例<br>创建<code>test1.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br>name=cyf # 定义变量name<br></code></pre></td></tr></table></figure><p>然后创建<code>test2.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br>source test1.sh # 或 . test1.sh<br>echo My name is: $name  # 可以使用test1.sh中的变量<br></code></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x test2.sh <br>./test2.sh <br></code></pre></td></tr></table></figure><p>结果为 <code>My name is: cyf</code></p><p>完</p><p>本文主要内容来自于acwing Linux基础课第三章Shell讲义，感兴趣可以自行购课</p>]]></content>
    
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>Linux</tag>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
